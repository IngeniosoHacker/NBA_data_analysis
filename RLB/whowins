#!/usr/bin/env Rscript

# Libraries
suppressMessages(library(DBI))
suppressMessages(library(RPostgres))
suppressMessages(library(optparse))

# Function to load environment variables from .env file
load_env <- function(env_file = ".env") {
  if (file.exists(env_file)) {
    env_vars <- readLines(env_file)
    env_vars <- env_vars[!grepl("^\\s*#", env_vars) & nzchar(trimws(env_vars))]
    
    for (line in env_vars) {
      if (grepl("=", line)) {
        parts <- strsplit(line, "=", fixed = TRUE)[[1]]
        if (length(parts) >= 2) {
          key <- trimws(parts[1])
          value <- trimws(paste(parts[-1], collapse = "="))
          do.call(Sys.setenv, setNames(list(value), key))
        }
      }
    }
    message("Environment variables loaded from .env file")
  } else {
    warning(".env file not found, using system environment variables")
  }
}

# Load environment variables
load_env()

# Command line options configuration
option_list <- list(
  make_option(c("--date"), type="character", default=NULL,
              help="Specific game date (YYYY-MM-DD)")
)
opt_parser <- OptionParser(usage = "whowins [home_team] [visitor_team] [--date YYYY-MM-DD]",
                           option_list=option_list)
opt <- parse_args(opt_parser, positional_arguments = TRUE)

if (length(opt$args) < 2) {
  cat("Usage: whowins [home_team] [visitor_team] [--date YYYY-MM-DD]\n")
  quit(status = 1)
}

home_team <- opt$args[1]
visitor_team <- opt$args[2]
game_date <- opt$options$date

# PostgreSQL connection using environment variables
con <- dbConnect(
  RPostgres::Postgres(),
  dbname = Sys.getenv("PGDATABASE", "nba_data"),
  host = Sys.getenv("PGHOST", "localhost"),
  port = as.integer(Sys.getenv("PGPORT", "5432")),
  user = Sys.getenv("PGUSER", "postgres"),
  password = Sys.getenv("PGPASSWORD", "")
)

# Model file
model_file <- "whowins_model.rds"

# ============================================================
# 1. Model training (if not already saved)
# ============================================================
if (!file.exists(model_file)) {
  message("Training model for the first time...")

  query <- "
    SELECT
      g.GAME_DATE,
      g.TEAM_ABBREVIATION_HOME,
      g.TEAM_ABBREVIATION_AWAY,
      g.PTS_HOME,
      g.PTS_AWAY,
      CASE WHEN g.PTS_HOME > g.PTS_AWAY THEN 1 ELSE 0 END AS HOME_WIN
    FROM Game g
    WHERE g.PTS_HOME IS NOT NULL AND g.PTS_AWAY IS NOT NULL
  "

  games <- dbGetQuery(con, query)
  
  # Rename columns for easier reference
  colnames(games) <- c("game_date", "home_team", "visitor_team", "home_points", "visitor_points", "home_win")
  
  # Simple variables: scored/allowed averages
  # Calculate home team averages (when playing at home)
  home_stats <- aggregate(home_points ~ home_team, data=games, mean)
  colnames(home_stats) <- c("team", "avg_home_points")
  
  # Calculate visitor team averages (when playing away)
  visitor_stats <- aggregate(visitor_points ~ visitor_team, data=games, mean)
  colnames(visitor_stats) <- c("team", "avg_visitor_points")
  
  # Merge the stats
  team_stats <- merge(home_stats, visitor_stats, by="team", all=TRUE)
  team_stats[is.na(team_stats)] <- 0  # Replace NAs with 0
  
  # Basic feature engineering
  games$home_avg <- sapply(games$home_team, function(t) {
    row <- subset(team_stats, team == t)
    if (nrow(row) == 0) return(0)
    return(row$avg_home_points)
  })
  
  games$visitor_avg <- sapply(games$visitor_team, function(t) {
    row <- subset(team_stats, team == t)
    if (nrow(row) == 0) return(0)
    return(row$avg_visitor_points)
  })
  
  # Add home advantage dummy variable
  games$home_adv <- 1
  
  # Logistic regression model
  model <- glm(home_win ~ home_avg + visitor_avg + home_adv,
               data = games, family = binomial)
  
  # Save model
  saveRDS(model, model_file)
  message("Model saved to ", model_file)
} else {
  message("Loading trained model from disk...")
  model <- readRDS(model_file)
}

# ============================================================
# 2. Prediction for the requested game
# ============================================================

# Get team statistics
query_stats <- "
SELECT TEAM_ABBREVIATION_HOME AS team,
       AVG(PTS_HOME) AS avg_home_points,
       AVG(PTS_AWAY) AS avg_away_points
FROM Game
WHERE PTS_HOME IS NOT NULL AND PTS_AWAY IS NOT NULL
GROUP BY TEAM_ABBREVIATION_HOME
"
team_stats <- dbGetQuery(con, query_stats)

# Fixed function to get team averages
get_team_avg <- function(team_name) {
  row <- team_stats[team_stats$team == team_name, ]
  if (nrow(row) == 0) return(list(avg_home = 0, avg_visitor = 0))
  return(list(avg_home = row$avg_home_points, avg_visitor = row$avg_away_points))
}

home_avgs <- get_team_avg(home_team)
visitor_avgs <- get_team_avg(visitor_team)

newdata <- data.frame(
  home_avg = home_avgs$avg_home,
  visitor_avg = visitor_avgs$avg_visitor,
  home_adv = 1
)

prob_home_win <- predict(model, newdata = newdata, type = "response")
prob_visitor_win <- 1 - prob_home_win

# Clean output with color coding
cat("============================================================\n")
cat("PREDICTION: ")
if (prob_home_win > 0.5) {
  cat("\033[32m", home_team, "\033[0m is the probable winner\n", sep = "")  # Green for winner
} else {
  cat("\033[32m", visitor_team, "\033[0m is the probable winner\n", sep = "")  # Green for winner
}

cat("Probability: ")
if (prob_home_win > prob_visitor_win) {
  cat("\033[32m", home_team, " ", round(prob_home_win * 100, 1), "%\033[0m vs \033[31m", 
      visitor_team, " ", round(prob_visitor_win * 100, 1), "%\033[0m\n", sep = "")
} else {
  cat("\033[31m", home_team, " ", round(prob_home_win * 100, 1), "%\033[0m vs \033[32m", 
      visitor_team, " ", round(prob_visitor_win * 100, 1), "%\033[0m\n", sep = "")
}
cat("============================================================\n")
cat("Prediction completed\n")

# Close connection
dbDisconnect(con)
